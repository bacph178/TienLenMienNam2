// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: open_id_login.proto

#ifndef PROTOBUF_open_5fid_5flogin_2eproto__INCLUDED
#define PROTOBUF_open_5fid_5flogin_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_open_5fid_5flogin_2eproto();
void protobuf_AssignDesc_open_5fid_5flogin_2eproto();
void protobuf_ShutdownFile_open_5fid_5flogin_2eproto();

class BINOpenIdLoginRequest;
class BINOpenIdLoginResponse;

// ===================================================================

class BINOpenIdLoginRequest : public ::google::protobuf::Message {
 public:
  BINOpenIdLoginRequest();
  virtual ~BINOpenIdLoginRequest();

  BINOpenIdLoginRequest(const BINOpenIdLoginRequest& from);

  inline BINOpenIdLoginRequest& operator=(const BINOpenIdLoginRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BINOpenIdLoginRequest& default_instance();

  void Swap(BINOpenIdLoginRequest* other);

  // implements Message ----------------------------------------------

  BINOpenIdLoginRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BINOpenIdLoginRequest& from);
  void MergeFrom(const BINOpenIdLoginRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 channel = 1;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 1;
  inline ::google::protobuf::int32 channel() const;
  inline void set_channel(::google::protobuf::int32 value);

  // required string openId = 2;
  inline bool has_openid() const;
  inline void clear_openid();
  static const int kOpenIdFieldNumber = 2;
  inline const ::std::string& openid() const;
  inline void set_openid(const ::std::string& value);
  inline void set_openid(const char* value);
  inline void set_openid(const char* value, size_t size);
  inline ::std::string* mutable_openid();
  inline ::std::string* release_openid();
  inline void set_allocated_openid(::std::string* openid);

  // optional string firstName = 3;
  inline bool has_firstname() const;
  inline void clear_firstname();
  static const int kFirstNameFieldNumber = 3;
  inline const ::std::string& firstname() const;
  inline void set_firstname(const ::std::string& value);
  inline void set_firstname(const char* value);
  inline void set_firstname(const char* value, size_t size);
  inline ::std::string* mutable_firstname();
  inline ::std::string* release_firstname();
  inline void set_allocated_firstname(::std::string* firstname);

  // optional string lastName = 4;
  inline bool has_lastname() const;
  inline void clear_lastname();
  static const int kLastNameFieldNumber = 4;
  inline const ::std::string& lastname() const;
  inline void set_lastname(const ::std::string& value);
  inline void set_lastname(const char* value);
  inline void set_lastname(const char* value, size_t size);
  inline ::std::string* mutable_lastname();
  inline ::std::string* release_lastname();
  inline void set_allocated_lastname(::std::string* lastname);

  // optional string email = 5;
  inline bool has_email() const;
  inline void clear_email();
  static const int kEmailFieldNumber = 5;
  inline const ::std::string& email() const;
  inline void set_email(const ::std::string& value);
  inline void set_email(const char* value);
  inline void set_email(const char* value, size_t size);
  inline ::std::string* mutable_email();
  inline ::std::string* release_email();
  inline void set_allocated_email(::std::string* email);

  // @@protoc_insertion_point(class_scope:BINOpenIdLoginRequest)
 private:
  inline void set_has_channel();
  inline void clear_has_channel();
  inline void set_has_openid();
  inline void clear_has_openid();
  inline void set_has_firstname();
  inline void clear_has_firstname();
  inline void set_has_lastname();
  inline void clear_has_lastname();
  inline void set_has_email();
  inline void clear_has_email();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* openid_;
  ::std::string* firstname_;
  ::std::string* lastname_;
  ::std::string* email_;
  ::google::protobuf::int32 channel_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_open_5fid_5flogin_2eproto();
  friend void protobuf_AssignDesc_open_5fid_5flogin_2eproto();
  friend void protobuf_ShutdownFile_open_5fid_5flogin_2eproto();

  void InitAsDefaultInstance();
  static BINOpenIdLoginRequest* default_instance_;
};
// -------------------------------------------------------------------

class BINOpenIdLoginResponse : public ::google::protobuf::Message {
 public:
  BINOpenIdLoginResponse();
  virtual ~BINOpenIdLoginResponse();

  BINOpenIdLoginResponse(const BINOpenIdLoginResponse& from);

  inline BINOpenIdLoginResponse& operator=(const BINOpenIdLoginResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BINOpenIdLoginResponse& default_instance();

  void Swap(BINOpenIdLoginResponse* other);

  // implements Message ----------------------------------------------

  BINOpenIdLoginResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BINOpenIdLoginResponse& from);
  void MergeFrom(const BINOpenIdLoginResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool responseCode = 1;
  inline bool has_responsecode() const;
  inline void clear_responsecode();
  static const int kResponseCodeFieldNumber = 1;
  inline bool responsecode() const;
  inline void set_responsecode(bool value);

  // optional string message = 2;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 2;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // optional int64 userId = 3;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIdFieldNumber = 3;
  inline ::google::protobuf::int64 userid() const;
  inline void set_userid(::google::protobuf::int64 value);

  // optional string userName = 4;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUserNameFieldNumber = 4;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // optional int64 cash = 5;
  inline bool has_cash() const;
  inline void clear_cash();
  static const int kCashFieldNumber = 5;
  inline ::google::protobuf::int64 cash() const;
  inline void set_cash(::google::protobuf::int64 value);

  // optional int64 gold = 6;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 6;
  inline ::google::protobuf::int64 gold() const;
  inline void set_gold(::google::protobuf::int64 value);

  // optional int32 avatarId = 7;
  inline bool has_avatarid() const;
  inline void clear_avatarid();
  static const int kAvatarIdFieldNumber = 7;
  inline ::google::protobuf::int32 avatarid() const;
  inline void set_avatarid(::google::protobuf::int32 value);

  // optional string avatarPath = 8;
  inline bool has_avatarpath() const;
  inline void clear_avatarpath();
  static const int kAvatarPathFieldNumber = 8;
  inline const ::std::string& avatarpath() const;
  inline void set_avatarpath(const ::std::string& value);
  inline void set_avatarpath(const char* value);
  inline void set_avatarpath(const char* value, size_t size);
  inline ::std::string* mutable_avatarpath();
  inline ::std::string* release_avatarpath();
  inline void set_allocated_avatarpath(::std::string* avatarpath);

  // optional int32 level = 9;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 9;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int64 exp = 10;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 10;
  inline ::google::protobuf::int64 exp() const;
  inline void set_exp(::google::protobuf::int64 value);

  // optional string sessionId = 11;
  inline bool has_sessionid() const;
  inline void clear_sessionid();
  static const int kSessionIdFieldNumber = 11;
  inline const ::std::string& sessionid() const;
  inline void set_sessionid(const ::std::string& value);
  inline void set_sessionid(const char* value);
  inline void set_sessionid(const char* value, size_t size);
  inline ::std::string* mutable_sessionid();
  inline ::std::string* release_sessionid();
  inline void set_allocated_sessionid(::std::string* sessionid);

  // optional bool enableDebugLag = 12;
  inline bool has_enabledebuglag() const;
  inline void clear_enabledebuglag();
  static const int kEnableDebugLagFieldNumber = 12;
  inline bool enabledebuglag() const;
  inline void set_enabledebuglag(bool value);

  // @@protoc_insertion_point(class_scope:BINOpenIdLoginResponse)
 private:
  inline void set_has_responsecode();
  inline void clear_has_responsecode();
  inline void set_has_message();
  inline void clear_has_message();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_cash();
  inline void clear_has_cash();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_avatarid();
  inline void clear_has_avatarid();
  inline void set_has_avatarpath();
  inline void clear_has_avatarpath();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_sessionid();
  inline void clear_has_sessionid();
  inline void set_has_enabledebuglag();
  inline void clear_has_enabledebuglag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* message_;
  ::google::protobuf::int64 userid_;
  ::std::string* username_;
  ::google::protobuf::int64 cash_;
  ::google::protobuf::int64 gold_;
  bool responsecode_;
  bool enabledebuglag_;
  ::google::protobuf::int32 avatarid_;
  ::std::string* avatarpath_;
  ::google::protobuf::int64 exp_;
  ::std::string* sessionid_;
  ::google::protobuf::int32 level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_open_5fid_5flogin_2eproto();
  friend void protobuf_AssignDesc_open_5fid_5flogin_2eproto();
  friend void protobuf_ShutdownFile_open_5fid_5flogin_2eproto();

  void InitAsDefaultInstance();
  static BINOpenIdLoginResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// BINOpenIdLoginRequest

// required int32 channel = 1;
inline bool BINOpenIdLoginRequest::has_channel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BINOpenIdLoginRequest::set_has_channel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BINOpenIdLoginRequest::clear_has_channel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BINOpenIdLoginRequest::clear_channel() {
  channel_ = 0;
  clear_has_channel();
}
inline ::google::protobuf::int32 BINOpenIdLoginRequest::channel() const {
  return channel_;
}
inline void BINOpenIdLoginRequest::set_channel(::google::protobuf::int32 value) {
  set_has_channel();
  channel_ = value;
}

// required string openId = 2;
inline bool BINOpenIdLoginRequest::has_openid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BINOpenIdLoginRequest::set_has_openid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BINOpenIdLoginRequest::clear_has_openid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BINOpenIdLoginRequest::clear_openid() {
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    openid_->clear();
  }
  clear_has_openid();
}
inline const ::std::string& BINOpenIdLoginRequest::openid() const {
  return *openid_;
}
inline void BINOpenIdLoginRequest::set_openid(const ::std::string& value) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(value);
}
inline void BINOpenIdLoginRequest::set_openid(const char* value) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(value);
}
inline void BINOpenIdLoginRequest::set_openid(const char* value, size_t size) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINOpenIdLoginRequest::mutable_openid() {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  return openid_;
}
inline ::std::string* BINOpenIdLoginRequest::release_openid() {
  clear_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = openid_;
    openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINOpenIdLoginRequest::set_allocated_openid(::std::string* openid) {
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    delete openid_;
  }
  if (openid) {
    set_has_openid();
    openid_ = openid;
  } else {
    clear_has_openid();
    openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string firstName = 3;
inline bool BINOpenIdLoginRequest::has_firstname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BINOpenIdLoginRequest::set_has_firstname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BINOpenIdLoginRequest::clear_has_firstname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BINOpenIdLoginRequest::clear_firstname() {
  if (firstname_ != &::google::protobuf::internal::kEmptyString) {
    firstname_->clear();
  }
  clear_has_firstname();
}
inline const ::std::string& BINOpenIdLoginRequest::firstname() const {
  return *firstname_;
}
inline void BINOpenIdLoginRequest::set_firstname(const ::std::string& value) {
  set_has_firstname();
  if (firstname_ == &::google::protobuf::internal::kEmptyString) {
    firstname_ = new ::std::string;
  }
  firstname_->assign(value);
}
inline void BINOpenIdLoginRequest::set_firstname(const char* value) {
  set_has_firstname();
  if (firstname_ == &::google::protobuf::internal::kEmptyString) {
    firstname_ = new ::std::string;
  }
  firstname_->assign(value);
}
inline void BINOpenIdLoginRequest::set_firstname(const char* value, size_t size) {
  set_has_firstname();
  if (firstname_ == &::google::protobuf::internal::kEmptyString) {
    firstname_ = new ::std::string;
  }
  firstname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINOpenIdLoginRequest::mutable_firstname() {
  set_has_firstname();
  if (firstname_ == &::google::protobuf::internal::kEmptyString) {
    firstname_ = new ::std::string;
  }
  return firstname_;
}
inline ::std::string* BINOpenIdLoginRequest::release_firstname() {
  clear_has_firstname();
  if (firstname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = firstname_;
    firstname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINOpenIdLoginRequest::set_allocated_firstname(::std::string* firstname) {
  if (firstname_ != &::google::protobuf::internal::kEmptyString) {
    delete firstname_;
  }
  if (firstname) {
    set_has_firstname();
    firstname_ = firstname;
  } else {
    clear_has_firstname();
    firstname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string lastName = 4;
inline bool BINOpenIdLoginRequest::has_lastname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BINOpenIdLoginRequest::set_has_lastname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BINOpenIdLoginRequest::clear_has_lastname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BINOpenIdLoginRequest::clear_lastname() {
  if (lastname_ != &::google::protobuf::internal::kEmptyString) {
    lastname_->clear();
  }
  clear_has_lastname();
}
inline const ::std::string& BINOpenIdLoginRequest::lastname() const {
  return *lastname_;
}
inline void BINOpenIdLoginRequest::set_lastname(const ::std::string& value) {
  set_has_lastname();
  if (lastname_ == &::google::protobuf::internal::kEmptyString) {
    lastname_ = new ::std::string;
  }
  lastname_->assign(value);
}
inline void BINOpenIdLoginRequest::set_lastname(const char* value) {
  set_has_lastname();
  if (lastname_ == &::google::protobuf::internal::kEmptyString) {
    lastname_ = new ::std::string;
  }
  lastname_->assign(value);
}
inline void BINOpenIdLoginRequest::set_lastname(const char* value, size_t size) {
  set_has_lastname();
  if (lastname_ == &::google::protobuf::internal::kEmptyString) {
    lastname_ = new ::std::string;
  }
  lastname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINOpenIdLoginRequest::mutable_lastname() {
  set_has_lastname();
  if (lastname_ == &::google::protobuf::internal::kEmptyString) {
    lastname_ = new ::std::string;
  }
  return lastname_;
}
inline ::std::string* BINOpenIdLoginRequest::release_lastname() {
  clear_has_lastname();
  if (lastname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lastname_;
    lastname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINOpenIdLoginRequest::set_allocated_lastname(::std::string* lastname) {
  if (lastname_ != &::google::protobuf::internal::kEmptyString) {
    delete lastname_;
  }
  if (lastname) {
    set_has_lastname();
    lastname_ = lastname;
  } else {
    clear_has_lastname();
    lastname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string email = 5;
inline bool BINOpenIdLoginRequest::has_email() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BINOpenIdLoginRequest::set_has_email() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BINOpenIdLoginRequest::clear_has_email() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BINOpenIdLoginRequest::clear_email() {
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    email_->clear();
  }
  clear_has_email();
}
inline const ::std::string& BINOpenIdLoginRequest::email() const {
  return *email_;
}
inline void BINOpenIdLoginRequest::set_email(const ::std::string& value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(value);
}
inline void BINOpenIdLoginRequest::set_email(const char* value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(value);
}
inline void BINOpenIdLoginRequest::set_email(const char* value, size_t size) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINOpenIdLoginRequest::mutable_email() {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  return email_;
}
inline ::std::string* BINOpenIdLoginRequest::release_email() {
  clear_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = email_;
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINOpenIdLoginRequest::set_allocated_email(::std::string* email) {
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    delete email_;
  }
  if (email) {
    set_has_email();
    email_ = email;
  } else {
    clear_has_email();
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// BINOpenIdLoginResponse

// required bool responseCode = 1;
inline bool BINOpenIdLoginResponse::has_responsecode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BINOpenIdLoginResponse::set_has_responsecode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BINOpenIdLoginResponse::clear_has_responsecode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BINOpenIdLoginResponse::clear_responsecode() {
  responsecode_ = false;
  clear_has_responsecode();
}
inline bool BINOpenIdLoginResponse::responsecode() const {
  return responsecode_;
}
inline void BINOpenIdLoginResponse::set_responsecode(bool value) {
  set_has_responsecode();
  responsecode_ = value;
}

// optional string message = 2;
inline bool BINOpenIdLoginResponse::has_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BINOpenIdLoginResponse::set_has_message() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BINOpenIdLoginResponse::clear_has_message() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BINOpenIdLoginResponse::clear_message() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& BINOpenIdLoginResponse::message() const {
  return *message_;
}
inline void BINOpenIdLoginResponse::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void BINOpenIdLoginResponse::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void BINOpenIdLoginResponse::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINOpenIdLoginResponse::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  return message_;
}
inline ::std::string* BINOpenIdLoginResponse::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINOpenIdLoginResponse::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 userId = 3;
inline bool BINOpenIdLoginResponse::has_userid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BINOpenIdLoginResponse::set_has_userid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BINOpenIdLoginResponse::clear_has_userid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BINOpenIdLoginResponse::clear_userid() {
  userid_ = GOOGLE_LONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::int64 BINOpenIdLoginResponse::userid() const {
  return userid_;
}
inline void BINOpenIdLoginResponse::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
}

// optional string userName = 4;
inline bool BINOpenIdLoginResponse::has_username() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BINOpenIdLoginResponse::set_has_username() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BINOpenIdLoginResponse::clear_has_username() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BINOpenIdLoginResponse::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& BINOpenIdLoginResponse::username() const {
  return *username_;
}
inline void BINOpenIdLoginResponse::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void BINOpenIdLoginResponse::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void BINOpenIdLoginResponse::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINOpenIdLoginResponse::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* BINOpenIdLoginResponse::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINOpenIdLoginResponse::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 cash = 5;
inline bool BINOpenIdLoginResponse::has_cash() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BINOpenIdLoginResponse::set_has_cash() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BINOpenIdLoginResponse::clear_has_cash() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BINOpenIdLoginResponse::clear_cash() {
  cash_ = GOOGLE_LONGLONG(0);
  clear_has_cash();
}
inline ::google::protobuf::int64 BINOpenIdLoginResponse::cash() const {
  return cash_;
}
inline void BINOpenIdLoginResponse::set_cash(::google::protobuf::int64 value) {
  set_has_cash();
  cash_ = value;
}

// optional int64 gold = 6;
inline bool BINOpenIdLoginResponse::has_gold() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BINOpenIdLoginResponse::set_has_gold() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BINOpenIdLoginResponse::clear_has_gold() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BINOpenIdLoginResponse::clear_gold() {
  gold_ = GOOGLE_LONGLONG(0);
  clear_has_gold();
}
inline ::google::protobuf::int64 BINOpenIdLoginResponse::gold() const {
  return gold_;
}
inline void BINOpenIdLoginResponse::set_gold(::google::protobuf::int64 value) {
  set_has_gold();
  gold_ = value;
}

// optional int32 avatarId = 7;
inline bool BINOpenIdLoginResponse::has_avatarid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BINOpenIdLoginResponse::set_has_avatarid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BINOpenIdLoginResponse::clear_has_avatarid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BINOpenIdLoginResponse::clear_avatarid() {
  avatarid_ = 0;
  clear_has_avatarid();
}
inline ::google::protobuf::int32 BINOpenIdLoginResponse::avatarid() const {
  return avatarid_;
}
inline void BINOpenIdLoginResponse::set_avatarid(::google::protobuf::int32 value) {
  set_has_avatarid();
  avatarid_ = value;
}

// optional string avatarPath = 8;
inline bool BINOpenIdLoginResponse::has_avatarpath() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BINOpenIdLoginResponse::set_has_avatarpath() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BINOpenIdLoginResponse::clear_has_avatarpath() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BINOpenIdLoginResponse::clear_avatarpath() {
  if (avatarpath_ != &::google::protobuf::internal::kEmptyString) {
    avatarpath_->clear();
  }
  clear_has_avatarpath();
}
inline const ::std::string& BINOpenIdLoginResponse::avatarpath() const {
  return *avatarpath_;
}
inline void BINOpenIdLoginResponse::set_avatarpath(const ::std::string& value) {
  set_has_avatarpath();
  if (avatarpath_ == &::google::protobuf::internal::kEmptyString) {
    avatarpath_ = new ::std::string;
  }
  avatarpath_->assign(value);
}
inline void BINOpenIdLoginResponse::set_avatarpath(const char* value) {
  set_has_avatarpath();
  if (avatarpath_ == &::google::protobuf::internal::kEmptyString) {
    avatarpath_ = new ::std::string;
  }
  avatarpath_->assign(value);
}
inline void BINOpenIdLoginResponse::set_avatarpath(const char* value, size_t size) {
  set_has_avatarpath();
  if (avatarpath_ == &::google::protobuf::internal::kEmptyString) {
    avatarpath_ = new ::std::string;
  }
  avatarpath_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINOpenIdLoginResponse::mutable_avatarpath() {
  set_has_avatarpath();
  if (avatarpath_ == &::google::protobuf::internal::kEmptyString) {
    avatarpath_ = new ::std::string;
  }
  return avatarpath_;
}
inline ::std::string* BINOpenIdLoginResponse::release_avatarpath() {
  clear_has_avatarpath();
  if (avatarpath_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = avatarpath_;
    avatarpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINOpenIdLoginResponse::set_allocated_avatarpath(::std::string* avatarpath) {
  if (avatarpath_ != &::google::protobuf::internal::kEmptyString) {
    delete avatarpath_;
  }
  if (avatarpath) {
    set_has_avatarpath();
    avatarpath_ = avatarpath;
  } else {
    clear_has_avatarpath();
    avatarpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 level = 9;
inline bool BINOpenIdLoginResponse::has_level() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BINOpenIdLoginResponse::set_has_level() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BINOpenIdLoginResponse::clear_has_level() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BINOpenIdLoginResponse::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 BINOpenIdLoginResponse::level() const {
  return level_;
}
inline void BINOpenIdLoginResponse::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int64 exp = 10;
inline bool BINOpenIdLoginResponse::has_exp() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BINOpenIdLoginResponse::set_has_exp() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BINOpenIdLoginResponse::clear_has_exp() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BINOpenIdLoginResponse::clear_exp() {
  exp_ = GOOGLE_LONGLONG(0);
  clear_has_exp();
}
inline ::google::protobuf::int64 BINOpenIdLoginResponse::exp() const {
  return exp_;
}
inline void BINOpenIdLoginResponse::set_exp(::google::protobuf::int64 value) {
  set_has_exp();
  exp_ = value;
}

// optional string sessionId = 11;
inline bool BINOpenIdLoginResponse::has_sessionid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BINOpenIdLoginResponse::set_has_sessionid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BINOpenIdLoginResponse::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BINOpenIdLoginResponse::clear_sessionid() {
  if (sessionid_ != &::google::protobuf::internal::kEmptyString) {
    sessionid_->clear();
  }
  clear_has_sessionid();
}
inline const ::std::string& BINOpenIdLoginResponse::sessionid() const {
  return *sessionid_;
}
inline void BINOpenIdLoginResponse::set_sessionid(const ::std::string& value) {
  set_has_sessionid();
  if (sessionid_ == &::google::protobuf::internal::kEmptyString) {
    sessionid_ = new ::std::string;
  }
  sessionid_->assign(value);
}
inline void BINOpenIdLoginResponse::set_sessionid(const char* value) {
  set_has_sessionid();
  if (sessionid_ == &::google::protobuf::internal::kEmptyString) {
    sessionid_ = new ::std::string;
  }
  sessionid_->assign(value);
}
inline void BINOpenIdLoginResponse::set_sessionid(const char* value, size_t size) {
  set_has_sessionid();
  if (sessionid_ == &::google::protobuf::internal::kEmptyString) {
    sessionid_ = new ::std::string;
  }
  sessionid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINOpenIdLoginResponse::mutable_sessionid() {
  set_has_sessionid();
  if (sessionid_ == &::google::protobuf::internal::kEmptyString) {
    sessionid_ = new ::std::string;
  }
  return sessionid_;
}
inline ::std::string* BINOpenIdLoginResponse::release_sessionid() {
  clear_has_sessionid();
  if (sessionid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sessionid_;
    sessionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINOpenIdLoginResponse::set_allocated_sessionid(::std::string* sessionid) {
  if (sessionid_ != &::google::protobuf::internal::kEmptyString) {
    delete sessionid_;
  }
  if (sessionid) {
    set_has_sessionid();
    sessionid_ = sessionid;
  } else {
    clear_has_sessionid();
    sessionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool enableDebugLag = 12;
inline bool BINOpenIdLoginResponse::has_enabledebuglag() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BINOpenIdLoginResponse::set_has_enabledebuglag() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BINOpenIdLoginResponse::clear_has_enabledebuglag() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BINOpenIdLoginResponse::clear_enabledebuglag() {
  enabledebuglag_ = false;
  clear_has_enabledebuglag();
}
inline bool BINOpenIdLoginResponse::enabledebuglag() const {
  return enabledebuglag_;
}
inline void BINOpenIdLoginResponse::set_enabledebuglag(bool value) {
  set_has_enabledebuglag();
  enabledebuglag_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_open_5fid_5flogin_2eproto__INCLUDED
