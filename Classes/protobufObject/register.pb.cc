// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: register.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "register.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* BINRegisterRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BINRegisterRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BINRegisterResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BINRegisterResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_register_2eproto() {
  protobuf_AddDesc_register_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "register.proto");
  GOOGLE_CHECK(file != NULL);
  BINRegisterRequest_descriptor_ = file->message_type(0);
  static const int BINRegisterRequest_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINRegisterRequest, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINRegisterRequest, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINRegisterRequest, fullname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINRegisterRequest, cp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINRegisterRequest, clienttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINRegisterRequest, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINRegisterRequest, deviceinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINRegisterRequest, ipaddress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINRegisterRequest, appversion_),
  };
  BINRegisterRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BINRegisterRequest_descriptor_,
      BINRegisterRequest::default_instance_,
      BINRegisterRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINRegisterRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINRegisterRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BINRegisterRequest));
  BINRegisterResponse_descriptor_ = file->message_type(1);
  static const int BINRegisterResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINRegisterResponse, responsecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINRegisterResponse, message_),
  };
  BINRegisterResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BINRegisterResponse_descriptor_,
      BINRegisterResponse::default_instance_,
      BINRegisterResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINRegisterResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BINRegisterResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BINRegisterResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_register_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BINRegisterRequest_descriptor_, &BINRegisterRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BINRegisterResponse_descriptor_, &BINRegisterResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_register_2eproto() {
  delete BINRegisterRequest::default_instance_;
  delete BINRegisterRequest_reflection_;
  delete BINRegisterResponse::default_instance_;
  delete BINRegisterResponse_reflection_;
}

void protobuf_AddDesc_register_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016register.proto\"\267\001\n\022BINRegisterRequest\022"
    "\020\n\010userName\030\001 \002(\t\022\020\n\010password\030\002 \002(\t\022\020\n\010f"
    "ullName\030\003 \001(\t\022\n\n\002cp\030\004 \002(\t\022\022\n\nclientType\030"
    "\006 \002(\005\022\020\n\010deviceId\030\007 \002(\t\022\022\n\ndeviceInfo\030\010 "
    "\001(\t\022\021\n\tipAddress\030\t \001(\t\022\022\n\nappVersion\030\n \001"
    "(\t\"<\n\023BINRegisterResponse\022\024\n\014responseCod"
    "e\030\001 \002(\010\022\017\n\007message\030\002 \001(\tB\036\n\034com.mi.game."
    "network.data.bin", 296);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "register.proto", &protobuf_RegisterTypes);
  BINRegisterRequest::default_instance_ = new BINRegisterRequest();
  BINRegisterResponse::default_instance_ = new BINRegisterResponse();
  BINRegisterRequest::default_instance_->InitAsDefaultInstance();
  BINRegisterResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_register_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_register_2eproto {
  StaticDescriptorInitializer_register_2eproto() {
    protobuf_AddDesc_register_2eproto();
  }
} static_descriptor_initializer_register_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int BINRegisterRequest::kUserNameFieldNumber;
const int BINRegisterRequest::kPasswordFieldNumber;
const int BINRegisterRequest::kFullNameFieldNumber;
const int BINRegisterRequest::kCpFieldNumber;
const int BINRegisterRequest::kClientTypeFieldNumber;
const int BINRegisterRequest::kDeviceIdFieldNumber;
const int BINRegisterRequest::kDeviceInfoFieldNumber;
const int BINRegisterRequest::kIpAddressFieldNumber;
const int BINRegisterRequest::kAppVersionFieldNumber;
#endif  // !_MSC_VER

BINRegisterRequest::BINRegisterRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BINRegisterRequest::InitAsDefaultInstance() {
}

BINRegisterRequest::BINRegisterRequest(const BINRegisterRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BINRegisterRequest::SharedCtor() {
  _cached_size_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fullname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  clienttype_ = 0;
  deviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  deviceinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ipaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  appversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BINRegisterRequest::~BINRegisterRequest() {
  SharedDtor();
}

void BINRegisterRequest::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (fullname_ != &::google::protobuf::internal::kEmptyString) {
    delete fullname_;
  }
  if (cp_ != &::google::protobuf::internal::kEmptyString) {
    delete cp_;
  }
  if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
    delete deviceid_;
  }
  if (deviceinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete deviceinfo_;
  }
  if (ipaddress_ != &::google::protobuf::internal::kEmptyString) {
    delete ipaddress_;
  }
  if (appversion_ != &::google::protobuf::internal::kEmptyString) {
    delete appversion_;
  }
  if (this != default_instance_) {
  }
}

void BINRegisterRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BINRegisterRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BINRegisterRequest_descriptor_;
}

const BINRegisterRequest& BINRegisterRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_register_2eproto();
  return *default_instance_;
}

BINRegisterRequest* BINRegisterRequest::default_instance_ = NULL;

BINRegisterRequest* BINRegisterRequest::New() const {
  return new BINRegisterRequest;
}

void BINRegisterRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    if (has_fullname()) {
      if (fullname_ != &::google::protobuf::internal::kEmptyString) {
        fullname_->clear();
      }
    }
    if (has_cp()) {
      if (cp_ != &::google::protobuf::internal::kEmptyString) {
        cp_->clear();
      }
    }
    clienttype_ = 0;
    if (has_deviceid()) {
      if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
        deviceid_->clear();
      }
    }
    if (has_deviceinfo()) {
      if (deviceinfo_ != &::google::protobuf::internal::kEmptyString) {
        deviceinfo_->clear();
      }
    }
    if (has_ipaddress()) {
      if (ipaddress_ != &::google::protobuf::internal::kEmptyString) {
        ipaddress_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_appversion()) {
      if (appversion_ != &::google::protobuf::internal::kEmptyString) {
        appversion_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BINRegisterRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // required string password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_fullName;
        break;
      }

      // optional string fullName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fullName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fullname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fullname().data(), this->fullname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_cp;
        break;
      }

      // required string cp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cp().data(), this->cp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_clientType;
        break;
      }

      // required int32 clientType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clientType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clienttype_)));
          set_has_clienttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_deviceId;
        break;
      }

      // required string deviceId = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deviceId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->deviceid().data(), this->deviceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_deviceInfo;
        break;
      }

      // optional string deviceInfo = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deviceInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->deviceinfo().data(), this->deviceinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_ipAddress;
        break;
      }

      // optional string ipAddress = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ipAddress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ipaddress()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ipaddress().data(), this->ipaddress().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_appVersion;
        break;
      }

      // optional string appVersion = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_appVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appversion()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->appversion().data(), this->appversion().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BINRegisterRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string userName = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->username(), output);
  }

  // required string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->password(), output);
  }

  // optional string fullName = 3;
  if (has_fullname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fullname().data(), this->fullname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->fullname(), output);
  }

  // required string cp = 4;
  if (has_cp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cp().data(), this->cp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->cp(), output);
  }

  // required int32 clientType = 6;
  if (has_clienttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->clienttype(), output);
  }

  // required string deviceId = 7;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->deviceid(), output);
  }

  // optional string deviceInfo = 8;
  if (has_deviceinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceinfo().data(), this->deviceinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->deviceinfo(), output);
  }

  // optional string ipAddress = 9;
  if (has_ipaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ipaddress().data(), this->ipaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->ipaddress(), output);
  }

  // optional string appVersion = 10;
  if (has_appversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appversion().data(), this->appversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->appversion(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BINRegisterRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string userName = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // required string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  // optional string fullName = 3;
  if (has_fullname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fullname().data(), this->fullname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->fullname(), target);
  }

  // required string cp = 4;
  if (has_cp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cp().data(), this->cp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->cp(), target);
  }

  // required int32 clientType = 6;
  if (has_clienttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->clienttype(), target);
  }

  // required string deviceId = 7;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->deviceid(), target);
  }

  // optional string deviceInfo = 8;
  if (has_deviceinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceinfo().data(), this->deviceinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->deviceinfo(), target);
  }

  // optional string ipAddress = 9;
  if (has_ipaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ipaddress().data(), this->ipaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->ipaddress(), target);
  }

  // optional string appVersion = 10;
  if (has_appversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appversion().data(), this->appversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->appversion(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BINRegisterRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string userName = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // required string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional string fullName = 3;
    if (has_fullname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fullname());
    }

    // required string cp = 4;
    if (has_cp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cp());
    }

    // required int32 clientType = 6;
    if (has_clienttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clienttype());
    }

    // required string deviceId = 7;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deviceid());
    }

    // optional string deviceInfo = 8;
    if (has_deviceinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deviceinfo());
    }

    // optional string ipAddress = 9;
    if (has_ipaddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ipaddress());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string appVersion = 10;
    if (has_appversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->appversion());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BINRegisterRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BINRegisterRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BINRegisterRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BINRegisterRequest::MergeFrom(const BINRegisterRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_fullname()) {
      set_fullname(from.fullname());
    }
    if (from.has_cp()) {
      set_cp(from.cp());
    }
    if (from.has_clienttype()) {
      set_clienttype(from.clienttype());
    }
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_deviceinfo()) {
      set_deviceinfo(from.deviceinfo());
    }
    if (from.has_ipaddress()) {
      set_ipaddress(from.ipaddress());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_appversion()) {
      set_appversion(from.appversion());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BINRegisterRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BINRegisterRequest::CopyFrom(const BINRegisterRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BINRegisterRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003b) != 0x0000003b) return false;

  return true;
}

void BINRegisterRequest::Swap(BINRegisterRequest* other) {
  if (other != this) {
    std::swap(username_, other->username_);
    std::swap(password_, other->password_);
    std::swap(fullname_, other->fullname_);
    std::swap(cp_, other->cp_);
    std::swap(clienttype_, other->clienttype_);
    std::swap(deviceid_, other->deviceid_);
    std::swap(deviceinfo_, other->deviceinfo_);
    std::swap(ipaddress_, other->ipaddress_);
    std::swap(appversion_, other->appversion_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BINRegisterRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BINRegisterRequest_descriptor_;
  metadata.reflection = BINRegisterRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BINRegisterResponse::kResponseCodeFieldNumber;
const int BINRegisterResponse::kMessageFieldNumber;
#endif  // !_MSC_VER

BINRegisterResponse::BINRegisterResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BINRegisterResponse::InitAsDefaultInstance() {
}

BINRegisterResponse::BINRegisterResponse(const BINRegisterResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BINRegisterResponse::SharedCtor() {
  _cached_size_ = 0;
  responsecode_ = false;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BINRegisterResponse::~BINRegisterResponse() {
  SharedDtor();
}

void BINRegisterResponse::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void BINRegisterResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BINRegisterResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BINRegisterResponse_descriptor_;
}

const BINRegisterResponse& BINRegisterResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_register_2eproto();
  return *default_instance_;
}

BINRegisterResponse* BINRegisterResponse::default_instance_ = NULL;

BINRegisterResponse* BINRegisterResponse::New() const {
  return new BINRegisterResponse;
}

void BINRegisterResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    responsecode_ = false;
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BINRegisterResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool responseCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &responsecode_)));
          set_has_responsecode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }

      // optional string message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BINRegisterResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool responseCode = 1;
  if (has_responsecode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->responsecode(), output);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BINRegisterResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool responseCode = 1;
  if (has_responsecode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->responsecode(), target);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BINRegisterResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool responseCode = 1;
    if (has_responsecode()) {
      total_size += 1 + 1;
    }

    // optional string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BINRegisterResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BINRegisterResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BINRegisterResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BINRegisterResponse::MergeFrom(const BINRegisterResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_responsecode()) {
      set_responsecode(from.responsecode());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BINRegisterResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BINRegisterResponse::CopyFrom(const BINRegisterResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BINRegisterResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BINRegisterResponse::Swap(BINRegisterResponse* other) {
  if (other != this) {
    std::swap(responsecode_, other->responsecode_);
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BINRegisterResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BINRegisterResponse_descriptor_;
  metadata.reflection = BINRegisterResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
