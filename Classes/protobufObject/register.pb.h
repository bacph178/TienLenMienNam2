// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: register.proto

#ifndef PROTOBUF_register_2eproto__INCLUDED
#define PROTOBUF_register_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_register_2eproto();
void protobuf_AssignDesc_register_2eproto();
void protobuf_ShutdownFile_register_2eproto();

class BINRegisterRequest;
class BINRegisterResponse;

// ===================================================================

class BINRegisterRequest : public ::google::protobuf::Message {
 public:
  BINRegisterRequest();
  virtual ~BINRegisterRequest();

  BINRegisterRequest(const BINRegisterRequest& from);

  inline BINRegisterRequest& operator=(const BINRegisterRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BINRegisterRequest& default_instance();

  void Swap(BINRegisterRequest* other);

  // implements Message ----------------------------------------------

  BINRegisterRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BINRegisterRequest& from);
  void MergeFrom(const BINRegisterRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string userName = 1;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUserNameFieldNumber = 1;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // required string password = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // optional string fullName = 3;
  inline bool has_fullname() const;
  inline void clear_fullname();
  static const int kFullNameFieldNumber = 3;
  inline const ::std::string& fullname() const;
  inline void set_fullname(const ::std::string& value);
  inline void set_fullname(const char* value);
  inline void set_fullname(const char* value, size_t size);
  inline ::std::string* mutable_fullname();
  inline ::std::string* release_fullname();
  inline void set_allocated_fullname(::std::string* fullname);

  // required string cp = 4;
  inline bool has_cp() const;
  inline void clear_cp();
  static const int kCpFieldNumber = 4;
  inline const ::std::string& cp() const;
  inline void set_cp(const ::std::string& value);
  inline void set_cp(const char* value);
  inline void set_cp(const char* value, size_t size);
  inline ::std::string* mutable_cp();
  inline ::std::string* release_cp();
  inline void set_allocated_cp(::std::string* cp);

  // required int32 clientType = 6;
  inline bool has_clienttype() const;
  inline void clear_clienttype();
  static const int kClientTypeFieldNumber = 6;
  inline ::google::protobuf::int32 clienttype() const;
  inline void set_clienttype(::google::protobuf::int32 value);

  // required string deviceId = 7;
  inline bool has_deviceid() const;
  inline void clear_deviceid();
  static const int kDeviceIdFieldNumber = 7;
  inline const ::std::string& deviceid() const;
  inline void set_deviceid(const ::std::string& value);
  inline void set_deviceid(const char* value);
  inline void set_deviceid(const char* value, size_t size);
  inline ::std::string* mutable_deviceid();
  inline ::std::string* release_deviceid();
  inline void set_allocated_deviceid(::std::string* deviceid);

  // optional string deviceInfo = 8;
  inline bool has_deviceinfo() const;
  inline void clear_deviceinfo();
  static const int kDeviceInfoFieldNumber = 8;
  inline const ::std::string& deviceinfo() const;
  inline void set_deviceinfo(const ::std::string& value);
  inline void set_deviceinfo(const char* value);
  inline void set_deviceinfo(const char* value, size_t size);
  inline ::std::string* mutable_deviceinfo();
  inline ::std::string* release_deviceinfo();
  inline void set_allocated_deviceinfo(::std::string* deviceinfo);

  // optional string ipAddress = 9;
  inline bool has_ipaddress() const;
  inline void clear_ipaddress();
  static const int kIpAddressFieldNumber = 9;
  inline const ::std::string& ipaddress() const;
  inline void set_ipaddress(const ::std::string& value);
  inline void set_ipaddress(const char* value);
  inline void set_ipaddress(const char* value, size_t size);
  inline ::std::string* mutable_ipaddress();
  inline ::std::string* release_ipaddress();
  inline void set_allocated_ipaddress(::std::string* ipaddress);

  // optional string appVersion = 10;
  inline bool has_appversion() const;
  inline void clear_appversion();
  static const int kAppVersionFieldNumber = 10;
  inline const ::std::string& appversion() const;
  inline void set_appversion(const ::std::string& value);
  inline void set_appversion(const char* value);
  inline void set_appversion(const char* value, size_t size);
  inline ::std::string* mutable_appversion();
  inline ::std::string* release_appversion();
  inline void set_allocated_appversion(::std::string* appversion);

  // @@protoc_insertion_point(class_scope:BINRegisterRequest)
 private:
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_fullname();
  inline void clear_has_fullname();
  inline void set_has_cp();
  inline void clear_has_cp();
  inline void set_has_clienttype();
  inline void clear_has_clienttype();
  inline void set_has_deviceid();
  inline void clear_has_deviceid();
  inline void set_has_deviceinfo();
  inline void clear_has_deviceinfo();
  inline void set_has_ipaddress();
  inline void clear_has_ipaddress();
  inline void set_has_appversion();
  inline void clear_has_appversion();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* username_;
  ::std::string* password_;
  ::std::string* fullname_;
  ::std::string* cp_;
  ::std::string* deviceid_;
  ::std::string* deviceinfo_;
  ::std::string* ipaddress_;
  ::std::string* appversion_;
  ::google::protobuf::int32 clienttype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_register_2eproto();
  friend void protobuf_AssignDesc_register_2eproto();
  friend void protobuf_ShutdownFile_register_2eproto();

  void InitAsDefaultInstance();
  static BINRegisterRequest* default_instance_;
};
// -------------------------------------------------------------------

class BINRegisterResponse : public ::google::protobuf::Message {
 public:
  BINRegisterResponse();
  virtual ~BINRegisterResponse();

  BINRegisterResponse(const BINRegisterResponse& from);

  inline BINRegisterResponse& operator=(const BINRegisterResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BINRegisterResponse& default_instance();

  void Swap(BINRegisterResponse* other);

  // implements Message ----------------------------------------------

  BINRegisterResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BINRegisterResponse& from);
  void MergeFrom(const BINRegisterResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool responseCode = 1;
  inline bool has_responsecode() const;
  inline void clear_responsecode();
  static const int kResponseCodeFieldNumber = 1;
  inline bool responsecode() const;
  inline void set_responsecode(bool value);

  // optional string message = 2;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 2;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:BINRegisterResponse)
 private:
  inline void set_has_responsecode();
  inline void clear_has_responsecode();
  inline void set_has_message();
  inline void clear_has_message();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* message_;
  bool responsecode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_register_2eproto();
  friend void protobuf_AssignDesc_register_2eproto();
  friend void protobuf_ShutdownFile_register_2eproto();

  void InitAsDefaultInstance();
  static BINRegisterResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// BINRegisterRequest

// required string userName = 1;
inline bool BINRegisterRequest::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BINRegisterRequest::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BINRegisterRequest::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BINRegisterRequest::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& BINRegisterRequest::username() const {
  return *username_;
}
inline void BINRegisterRequest::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void BINRegisterRequest::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void BINRegisterRequest::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINRegisterRequest::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* BINRegisterRequest::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINRegisterRequest::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string password = 2;
inline bool BINRegisterRequest::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BINRegisterRequest::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BINRegisterRequest::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BINRegisterRequest::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& BINRegisterRequest::password() const {
  return *password_;
}
inline void BINRegisterRequest::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void BINRegisterRequest::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void BINRegisterRequest::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINRegisterRequest::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* BINRegisterRequest::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINRegisterRequest::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string fullName = 3;
inline bool BINRegisterRequest::has_fullname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BINRegisterRequest::set_has_fullname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BINRegisterRequest::clear_has_fullname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BINRegisterRequest::clear_fullname() {
  if (fullname_ != &::google::protobuf::internal::kEmptyString) {
    fullname_->clear();
  }
  clear_has_fullname();
}
inline const ::std::string& BINRegisterRequest::fullname() const {
  return *fullname_;
}
inline void BINRegisterRequest::set_fullname(const ::std::string& value) {
  set_has_fullname();
  if (fullname_ == &::google::protobuf::internal::kEmptyString) {
    fullname_ = new ::std::string;
  }
  fullname_->assign(value);
}
inline void BINRegisterRequest::set_fullname(const char* value) {
  set_has_fullname();
  if (fullname_ == &::google::protobuf::internal::kEmptyString) {
    fullname_ = new ::std::string;
  }
  fullname_->assign(value);
}
inline void BINRegisterRequest::set_fullname(const char* value, size_t size) {
  set_has_fullname();
  if (fullname_ == &::google::protobuf::internal::kEmptyString) {
    fullname_ = new ::std::string;
  }
  fullname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINRegisterRequest::mutable_fullname() {
  set_has_fullname();
  if (fullname_ == &::google::protobuf::internal::kEmptyString) {
    fullname_ = new ::std::string;
  }
  return fullname_;
}
inline ::std::string* BINRegisterRequest::release_fullname() {
  clear_has_fullname();
  if (fullname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fullname_;
    fullname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINRegisterRequest::set_allocated_fullname(::std::string* fullname) {
  if (fullname_ != &::google::protobuf::internal::kEmptyString) {
    delete fullname_;
  }
  if (fullname) {
    set_has_fullname();
    fullname_ = fullname;
  } else {
    clear_has_fullname();
    fullname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string cp = 4;
inline bool BINRegisterRequest::has_cp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BINRegisterRequest::set_has_cp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BINRegisterRequest::clear_has_cp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BINRegisterRequest::clear_cp() {
  if (cp_ != &::google::protobuf::internal::kEmptyString) {
    cp_->clear();
  }
  clear_has_cp();
}
inline const ::std::string& BINRegisterRequest::cp() const {
  return *cp_;
}
inline void BINRegisterRequest::set_cp(const ::std::string& value) {
  set_has_cp();
  if (cp_ == &::google::protobuf::internal::kEmptyString) {
    cp_ = new ::std::string;
  }
  cp_->assign(value);
}
inline void BINRegisterRequest::set_cp(const char* value) {
  set_has_cp();
  if (cp_ == &::google::protobuf::internal::kEmptyString) {
    cp_ = new ::std::string;
  }
  cp_->assign(value);
}
inline void BINRegisterRequest::set_cp(const char* value, size_t size) {
  set_has_cp();
  if (cp_ == &::google::protobuf::internal::kEmptyString) {
    cp_ = new ::std::string;
  }
  cp_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINRegisterRequest::mutable_cp() {
  set_has_cp();
  if (cp_ == &::google::protobuf::internal::kEmptyString) {
    cp_ = new ::std::string;
  }
  return cp_;
}
inline ::std::string* BINRegisterRequest::release_cp() {
  clear_has_cp();
  if (cp_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cp_;
    cp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINRegisterRequest::set_allocated_cp(::std::string* cp) {
  if (cp_ != &::google::protobuf::internal::kEmptyString) {
    delete cp_;
  }
  if (cp) {
    set_has_cp();
    cp_ = cp;
  } else {
    clear_has_cp();
    cp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 clientType = 6;
inline bool BINRegisterRequest::has_clienttype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BINRegisterRequest::set_has_clienttype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BINRegisterRequest::clear_has_clienttype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BINRegisterRequest::clear_clienttype() {
  clienttype_ = 0;
  clear_has_clienttype();
}
inline ::google::protobuf::int32 BINRegisterRequest::clienttype() const {
  return clienttype_;
}
inline void BINRegisterRequest::set_clienttype(::google::protobuf::int32 value) {
  set_has_clienttype();
  clienttype_ = value;
}

// required string deviceId = 7;
inline bool BINRegisterRequest::has_deviceid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BINRegisterRequest::set_has_deviceid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BINRegisterRequest::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BINRegisterRequest::clear_deviceid() {
  if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
    deviceid_->clear();
  }
  clear_has_deviceid();
}
inline const ::std::string& BINRegisterRequest::deviceid() const {
  return *deviceid_;
}
inline void BINRegisterRequest::set_deviceid(const ::std::string& value) {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    deviceid_ = new ::std::string;
  }
  deviceid_->assign(value);
}
inline void BINRegisterRequest::set_deviceid(const char* value) {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    deviceid_ = new ::std::string;
  }
  deviceid_->assign(value);
}
inline void BINRegisterRequest::set_deviceid(const char* value, size_t size) {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    deviceid_ = new ::std::string;
  }
  deviceid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINRegisterRequest::mutable_deviceid() {
  set_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    deviceid_ = new ::std::string;
  }
  return deviceid_;
}
inline ::std::string* BINRegisterRequest::release_deviceid() {
  clear_has_deviceid();
  if (deviceid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = deviceid_;
    deviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINRegisterRequest::set_allocated_deviceid(::std::string* deviceid) {
  if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
    delete deviceid_;
  }
  if (deviceid) {
    set_has_deviceid();
    deviceid_ = deviceid;
  } else {
    clear_has_deviceid();
    deviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string deviceInfo = 8;
inline bool BINRegisterRequest::has_deviceinfo() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BINRegisterRequest::set_has_deviceinfo() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BINRegisterRequest::clear_has_deviceinfo() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BINRegisterRequest::clear_deviceinfo() {
  if (deviceinfo_ != &::google::protobuf::internal::kEmptyString) {
    deviceinfo_->clear();
  }
  clear_has_deviceinfo();
}
inline const ::std::string& BINRegisterRequest::deviceinfo() const {
  return *deviceinfo_;
}
inline void BINRegisterRequest::set_deviceinfo(const ::std::string& value) {
  set_has_deviceinfo();
  if (deviceinfo_ == &::google::protobuf::internal::kEmptyString) {
    deviceinfo_ = new ::std::string;
  }
  deviceinfo_->assign(value);
}
inline void BINRegisterRequest::set_deviceinfo(const char* value) {
  set_has_deviceinfo();
  if (deviceinfo_ == &::google::protobuf::internal::kEmptyString) {
    deviceinfo_ = new ::std::string;
  }
  deviceinfo_->assign(value);
}
inline void BINRegisterRequest::set_deviceinfo(const char* value, size_t size) {
  set_has_deviceinfo();
  if (deviceinfo_ == &::google::protobuf::internal::kEmptyString) {
    deviceinfo_ = new ::std::string;
  }
  deviceinfo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINRegisterRequest::mutable_deviceinfo() {
  set_has_deviceinfo();
  if (deviceinfo_ == &::google::protobuf::internal::kEmptyString) {
    deviceinfo_ = new ::std::string;
  }
  return deviceinfo_;
}
inline ::std::string* BINRegisterRequest::release_deviceinfo() {
  clear_has_deviceinfo();
  if (deviceinfo_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = deviceinfo_;
    deviceinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINRegisterRequest::set_allocated_deviceinfo(::std::string* deviceinfo) {
  if (deviceinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete deviceinfo_;
  }
  if (deviceinfo) {
    set_has_deviceinfo();
    deviceinfo_ = deviceinfo;
  } else {
    clear_has_deviceinfo();
    deviceinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string ipAddress = 9;
inline bool BINRegisterRequest::has_ipaddress() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BINRegisterRequest::set_has_ipaddress() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BINRegisterRequest::clear_has_ipaddress() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BINRegisterRequest::clear_ipaddress() {
  if (ipaddress_ != &::google::protobuf::internal::kEmptyString) {
    ipaddress_->clear();
  }
  clear_has_ipaddress();
}
inline const ::std::string& BINRegisterRequest::ipaddress() const {
  return *ipaddress_;
}
inline void BINRegisterRequest::set_ipaddress(const ::std::string& value) {
  set_has_ipaddress();
  if (ipaddress_ == &::google::protobuf::internal::kEmptyString) {
    ipaddress_ = new ::std::string;
  }
  ipaddress_->assign(value);
}
inline void BINRegisterRequest::set_ipaddress(const char* value) {
  set_has_ipaddress();
  if (ipaddress_ == &::google::protobuf::internal::kEmptyString) {
    ipaddress_ = new ::std::string;
  }
  ipaddress_->assign(value);
}
inline void BINRegisterRequest::set_ipaddress(const char* value, size_t size) {
  set_has_ipaddress();
  if (ipaddress_ == &::google::protobuf::internal::kEmptyString) {
    ipaddress_ = new ::std::string;
  }
  ipaddress_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINRegisterRequest::mutable_ipaddress() {
  set_has_ipaddress();
  if (ipaddress_ == &::google::protobuf::internal::kEmptyString) {
    ipaddress_ = new ::std::string;
  }
  return ipaddress_;
}
inline ::std::string* BINRegisterRequest::release_ipaddress() {
  clear_has_ipaddress();
  if (ipaddress_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ipaddress_;
    ipaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINRegisterRequest::set_allocated_ipaddress(::std::string* ipaddress) {
  if (ipaddress_ != &::google::protobuf::internal::kEmptyString) {
    delete ipaddress_;
  }
  if (ipaddress) {
    set_has_ipaddress();
    ipaddress_ = ipaddress;
  } else {
    clear_has_ipaddress();
    ipaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string appVersion = 10;
inline bool BINRegisterRequest::has_appversion() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BINRegisterRequest::set_has_appversion() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BINRegisterRequest::clear_has_appversion() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BINRegisterRequest::clear_appversion() {
  if (appversion_ != &::google::protobuf::internal::kEmptyString) {
    appversion_->clear();
  }
  clear_has_appversion();
}
inline const ::std::string& BINRegisterRequest::appversion() const {
  return *appversion_;
}
inline void BINRegisterRequest::set_appversion(const ::std::string& value) {
  set_has_appversion();
  if (appversion_ == &::google::protobuf::internal::kEmptyString) {
    appversion_ = new ::std::string;
  }
  appversion_->assign(value);
}
inline void BINRegisterRequest::set_appversion(const char* value) {
  set_has_appversion();
  if (appversion_ == &::google::protobuf::internal::kEmptyString) {
    appversion_ = new ::std::string;
  }
  appversion_->assign(value);
}
inline void BINRegisterRequest::set_appversion(const char* value, size_t size) {
  set_has_appversion();
  if (appversion_ == &::google::protobuf::internal::kEmptyString) {
    appversion_ = new ::std::string;
  }
  appversion_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINRegisterRequest::mutable_appversion() {
  set_has_appversion();
  if (appversion_ == &::google::protobuf::internal::kEmptyString) {
    appversion_ = new ::std::string;
  }
  return appversion_;
}
inline ::std::string* BINRegisterRequest::release_appversion() {
  clear_has_appversion();
  if (appversion_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = appversion_;
    appversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINRegisterRequest::set_allocated_appversion(::std::string* appversion) {
  if (appversion_ != &::google::protobuf::internal::kEmptyString) {
    delete appversion_;
  }
  if (appversion) {
    set_has_appversion();
    appversion_ = appversion;
  } else {
    clear_has_appversion();
    appversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// BINRegisterResponse

// required bool responseCode = 1;
inline bool BINRegisterResponse::has_responsecode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BINRegisterResponse::set_has_responsecode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BINRegisterResponse::clear_has_responsecode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BINRegisterResponse::clear_responsecode() {
  responsecode_ = false;
  clear_has_responsecode();
}
inline bool BINRegisterResponse::responsecode() const {
  return responsecode_;
}
inline void BINRegisterResponse::set_responsecode(bool value) {
  set_has_responsecode();
  responsecode_ = value;
}

// optional string message = 2;
inline bool BINRegisterResponse::has_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BINRegisterResponse::set_has_message() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BINRegisterResponse::clear_has_message() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BINRegisterResponse::clear_message() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& BINRegisterResponse::message() const {
  return *message_;
}
inline void BINRegisterResponse::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void BINRegisterResponse::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void BINRegisterResponse::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BINRegisterResponse::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  return message_;
}
inline ::std::string* BINRegisterResponse::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BINRegisterResponse::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_register_2eproto__INCLUDED
